*nvim-tree.lua* A File Explorer For Neovim Written In Lua

Author: Yazdani Kiyan <yazdani.kiyan@protonmail.com>

==============================================================================
CONTENTS                                                           *nvim-tree*

  1. Introduction                             |nvim-tree-introduction|
  2. Quickstart                               |nvim-tree-quickstart|
  3. Commands                                 |nvim-tree-commands|
  4. Setup/Configuration                      |nvim-tree-setup|
    4.1 Vinegar Style                         |nvim-tree-vinegar|
  5. Api                                      |nvim-tree-api|
  6. Mappings                                 |nvim-tree-mappings|
  7. Highlight Groups                         |nvim-tree-highlight|
  8. Events                                   |nvim-tree-events|
  9. Bookmarks                                |nvim-tree-bookmarks|

==============================================================================
 1. INTRODUCTION                                      *nvim-tree-introduction*

Features

    - Automatic updates
    - File type icons
    - Git integration
    - Diagnostics integration: LSP and COC
    - (Live) filtering
    - Cut, copy, paste, rename, delete, create
    - Highly customisable

File Icons

    https://github.com/kyazdani42/nvim-web-devicons is optional and used to
    display file icons.  It requires a patched font: https://www.nerdfonts.com

     should look like an open folder.

    To disable the display of icons see |renderer.icons.show|

Colours

    Syntax highlighting uses g:terminal_color_ from colorschemes, falls back to
    ugly colors otherwise.

Git Integration

    Icon indicates when a file is:
    - ✗  unstaged or folder is dirty
    - ✓  staged
    - ★  new file
    - ✓ ✗ partially staged
    - ✓ ★ new file staged
    - ✓ ★ ✗ new file staged and has unstaged modifications
    - ═  merging
    - ➜  renamed

Requirements

    This file explorer requires `neovim >= 0.7.0`

==============================================================================
 2. QUICK START                                         *nvim-tree-quickstart*

Setup should be run in a lua file or in a |lua-heredoc| if using in a vim file.
Empty setup using defaults:
>
 require("nvim-tree").setup()
<
Or setup with some options:
>
 require("nvim-tree").setup({
   sort_by = "case_sensitive",
   view = {
    adaptive_size = true,
    mappings = {
      list = {
        { key = "u", action = "dir_up" },
      },
    },
   },
   renderer = {
    group_empty = true,
   },
   filters = {
    dotfiles = true,
   },
 })
<
==============================================================================
 3. COMMANDS                                              *nvim-tree-commands*

:NvimTreeOpen           Opens the tree. Takes an optional path argument.

:NvimTreeClose          Closes the tree.

:NvimTreeToggle         Open or close the tree. Takes an optional path argument.

:NvimTreeFocus          Open the tree if it is closed, and then focus on the
                        tree.

:NvimTreeRefresh        Refresh the tree.

:NvimTreeFindFile       The command will change the cursor in the tree for the
                        current bufname.

                        It will also open the leafs of the tree leading to the
                        file in the buffer (if you opened a file with something
                        else than the NvimTree, like `fzf` or `:split`)

:NvimTreeFindFileToggle
                        Close the tree or change the cursor in the tree for
                        the current bufname, similar to combination of
                        `:NvimTreeToggle` and `:NvimTreeFindFile.` Takes an
                        optional path argument.

:NvimTreeClipboard      Print clipboard content for both cut and copy.

:NvimTreeResize         Resize the NvimTree window to the given size. Example:
                        `:NvimTreeResize 50` resizes the window to the width
                        of 50. If the size starts with "+" or "-" it adds or
                        removes the given value to the current window width.
                        Example `:NvimTreeResize -20` removes the value 20
                        from the current width. And `:NvimTreeResize +20` adds
                        the value 20 to the current width.

:NvimTreeCollapse       Collapses the nvim-tree recursively.

:NvimTreeCollapseKeepBuffers
                        Collapses the nvim-tree recursively, but keep the
                        directories open, which are used in an open buffer.


==============================================================================
 4. SETUP                                                    *nvim-tree-setup*

You must run setup() function to initialise nvim-tree.

setup() function takes one optional argument: configuration table. If omitted
nvim-tree will be initialised with default configuration.

Subsequent calls to setup will replace the previous configuration.

 DEFAULT SETTINGS
------------------------------------------------------------------------------
require("nvim-tree").setup {
  auto_reload_on_write = true,          --      |nvim-tree.auto_reload_on_write|
  create_in_closed_folder = false,      --             |nvim-tree.disable_netrw|
  disable_netrw = false,                --             |nvim-tree.disable_netrw|
  hijack_cursor = false,                --             |nvim-tree.hijack_cursor|
  hijack_netrw = true,                  --              |nvim-tree.hijack_netrw|
  hijack_unnamed_buffer_when_opening = false, -- |nvim-tree.hijack_unnamed_buffer_when_opening|
  ignore_buffer_on_setup = false,       --    |nvim-tree.ignore_buffer_on_setup|
  open_on_setup = false,                --             |nvim-tree.open_on_setup|
  ignore_ft_on_setup = {},              --        |nvim-tree.ignore_ft_on_setup|
  open_on_setup_file = false,           --        |nvim-tree.open_on_setup_file|
  open_on_tab = false,                  --               |nvim-tree.open_on_tab|
  ignore_buf_on_tab_change = {},        --  |nvim-tree.ignore_buf_on_tab_change|
  sort_by = "name",                     --                   |nvim-tree.sort_by|
  root_dirs = {},                       --                 |nvim-tree.root_dirs|
  prefer_startup_root = false,          --       |nvim-tree.prefer_startup_root|
  sync_root_with_cwd = false,           --        |nvim-tree.sync_root_with_cwd|
  reload_on_bufenter = false,           --        |nvim-tree.reload_on_bufenter|
  respect_buf_cwd = false,              --           |nvim-tree.respect_buf_cwd|
  on_attach = "disable",                --                 |nvim-tree.on_attach|
  remove_keymaps = false,               --            |nvim-tree.remove_keymaps|
  view = {                              --                      |nvim-tree.view|
    adaptive_size = false,              --             |nvim-tree.adaptive_size|
    centralize_selection = false,       --      |nvim-tree.centralize_selection|
    width = 30,                         --                |nvim-tree.view.width|
    height = 30,                        --               |nvim-tree.view.height|
    hide_root_folder = false,           --          |nvim-tree.hide_root_folder|
    side = "left",                      --                      |nvim-tree.side|
    preserve_window_proportions = false,--  |nvim-tree.preserve_window_proportions|
    number = false,                     --                    |nvim-tree.number|
    relativenumber = false,             --            |nvim-tree.relativenumber|
    signcolumn = "yes",                 --                |nvim-tree.signcolumn|
    --------------------------------------------------------------------------
    -- @deprecated~
    mappings = {                        --             |nvim-tree.view.mappings|
      custom_only = false,              --      |nvim-tree.mappings.custom_only|
      list = {                          --             |nvim-tree.mappings.list|
        -- user mappings go here
      },
    },
    --------------------------------------------------------------------------
    float = {                           --                |nvim-tree.view.float|
      enable = false,                   --              |nvim-tree.float.enable|
      open_win_config = {               --     |nvim-tree.float.open_win_config|
        relative = "editor",       -- *nvim-tree.float.open_win_config.defaults*
        border = "rounded",
        width = 30,
        height = 30,
        row = 1,
        col = 1,
      },
    },
  },
  renderer = {                          --                  |nvim-tree.renderer|
    add_trailing = false,               --              |nvim-tree.add_trailing|
    group_empty = false,                --               |nvim-tree.group_empty|
    highlight_git = false,              --             |nvim-tree.highlight_git|
    full_name = false,                  --                 |nvim-tree.full_name|
    highlight_opened_files = "none",    --    |nvim-tree.highlight_opened_files|
    root_folder_modifier = ":~",        --      |nvim-tree.root_folder_modifier|
    indent_markers = {                  --            |nvim-tree.indent_markers|
      enable = false,                   --     |nvim-tree.indent_markers.enable|
      inline_arrows = true,             --             |nvim-tree.inline_arrows|
      icons = {                         --      |nvim-tree.indent_markers.icons|
        corner = "└",
        edge = "│",
        item = "│",
        none = " ",
      },
    },
    icons = {                           --                     |nvim-tree.icons|
      webdev_colors = true,             --             |nvim-tree.webdev_colors|
      git_placement = "before",         --             |nvim-tree.git_placement|
      padding = " ",                    --                   |nvim-tree.padding|
      symlink_arrow = " ➛ ",            --             |nvim-tree.symlink_arrow|
      show = {                          --                |nvim-tree.show-icons|
        file = true,                    --            |nvim-tree.show-icon.file|
        folder = true,                  --          |nvim-tree.show-icon.folder|
        folder_arrow = true,            --    |nvim-tree.show-icon.folder_arrow|
        git = true,                     --             |nvim-tree.show-icon.git|
      },
      glyphs = {
        default = "",
        symlink = "",
        bookmark = "",
        folder = {
          arrow_closed = "",
          arrow_open = "",
          default = "",
          open = "",
          empty = "",
          empty_open = "",
          symlink = "",
          symlink_open = "",
        },
        git = {
          unstaged = "✗",
          staged = "✓",
          unmerged = "",
          renamed = "➜",
          untracked = "★",
          deleted = "",
          ignored = "◌",
        },
      },
    },
    special_files = {                  --              |nvim-tree.special_files|
      "Cargo.toml", "Makefile", "README.md", "readme.md"
    },
    symlink_destination = true,        --        |nvim-tree.symlink_destination|
  },                                   --
  hijack_directories = {               --         |nvim-tree.hijack_directories|
    enable = true,                     --  |nvim-tree.hijack_directories.enable|
    auto_open = true,                  --                  |nvim-tree.auto_open|
  },                                   --
  update_focused_file = {              --        |nvim-tree.update_focused_file|
    enable = false,                    -- |nvim-tree.update_focused_file.enable|
    update_root = false,               --                |nvim-tree.update_root|
    ignore_list = {},             -- |nvim-tree.update_focused_file.ignore_list|
  },
  system_open = {                      --                |nvim-tree.system_open|
    cmd = "",                          --            |nvim-tree.system_open.cmd|
    args = {},                         --           |nvim-tree.system_open.args|
  },                                   --
  diagnostics = {                      --                |nvim-tree.diagnostics|
    enable = false,                    --
    show_on_dirs = false,              --   |nvim-tree.diagnostics.show_on_dirs|
    debounce_delay = 50,               -- |nvim-tree.diagnostics.debounce_delay|
    icons = {                          --          |nvim-tree.diagnostics.icons|
      hint = "",
      info = "",
      warning = "",
      error = "",
    },
  },
  filters = {                          --                    |nvim-tree.filters|
    dotfiles = false,                  --           |nvim-tree.filters.dotfiles|
    custom = {},                       --             |nvim-tree.filters.custom|
    exclude = {},                      --            |nvim-tree.filters.exclude|
  },                                   --
  filesystem_watchers = {              --        |nvim-tree.filesystem_watchers|
    enable = true,
    debounce_delay = 50,       -- |nvim-tree.filesystem_watchers.debounce_delay|
  },
  git = {                              --                        |nvim-tree.git|
    enable = true,                     --                 |nvim-tree.git.enable|
    ignore = true,                     --                 |nvim-tree.git.ignore|
    show_on_dirs = true,               --           |nvim-tree.git.show_on_dirs|
    timeout = 400,                     --                |nvim-tree.git.timeout|
  },                                   --
  actions = {                          --                    |nvim-tree.actions|
    use_system_clipboard = true,       --       |nvim-tree.use_system_clipboard|
    change_dir = {                     --                 |nvim-tree.change_dir|
      enable = true,                   --          |nvim-tree.change_dir.enable|
      global = false,                  --          |nvim-tree.change_dir.global|
      restrict_above_cwd = false,      --         |nvim-tree.restrict_above_cwd|
    },                                 --
    expand_all = {                     --                 |nvim-tree.expand_all|
      max_folder_discovery = 300,      --       |nvim-tree.max_folder_discovery|
      exclude = {},                    --         |nvim-tree.expand_all.exclude|
    },                                 --
    file_popup = {                     --                 |nvim-tree.file_popup|
      open_win_config = {              -- |nvim-tree.file_popup.open_win_config|
        col = 1,              -- *nvim-tree.file_popup.open_win_config.defaults*
        row = 1,
        relative = "cursor",
        border = "shadow",
        style = "minimal",
      },
    },
    open_file = {                      --                  |nvim-tree.open_file|
      quit_on_open = false,            --               |nvim-tree.quit_on_open|
      resize_window = true,            --              |nvim-tree.resize_window|
      window_picker = {                --              |nvim-tree.window_picker|
        enable = true,                 --       |nvim-tree.window_picker.enable|
        chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890", -- |nvim-tree.window_picker.chars|
        exclude = {                    --      |nvim-tree.window_picker.exclude|
                                   -- *nvim-tree.window_picker.exclude.defaults*
          filetype = { "notify", "packer", "qf", "diff", "fugitive", "fugitiveblame" },
          buftype = { "nofile", "terminal", "help" },
        },
      },
    },
    remove_file = {                    --                |nvim-tree.remove_file|
      close_window = true,             --               |nvim-tree.close_window|
    },                                 --
  },                                   --
  trash = {                            --                      |nvim-tree.trash|
    cmd = "gio trash",                 --                  |nvim-tree.trash.cmd|
    require_confirm = true,            --      |nvim-tree.trash.require_confirm|
  },                                   --
  live_filter = {                      --                |nvim-tree.live_filter|
    prefix = "[FILTER]: ",             --         |nvim-tree.live_filter.prefix|
    always_show_folders = true,        --        |nvim-tree.always_show_folders|
  },                                   --
  log = {                              --                        |nvim-tree.log|
    enable = false,                    --                 |nvim-tree.log.enable|
    truncate = false,                  --               |nvim-tree.log.truncate|
    types = {                          --                  |nvim-tree.log.types|
      all = false,                     --                    |nvim-tree.log.all|
      config = false,                  --                 |nvim-tree.log.config|
      copy_paste = false,              --             |nvim-tree.log.copy_paste|
      dev = false,                     --                    |nvim-tree.log.dev|
      diagnostics = false,             --            |nvim-tree.log.diagnostics|
      git = false,                     --                    |nvim-tree.log.git|
      profile = false,                 --                |nvim-tree.log.profile|
      watcher = false,                 --                |nvim-tree.log.watcher|
    },
  },
}
------------------------------------------------------------------------------

Here is a list of the options available in the setup call:

                                              *nvim-tree.auto_reload_on_write*
auto_reload_on_write        boolean
                            default: `true`
        Reloads the explorer every time a buffer is written to.

                                           *nvim-tree.create_in_closed_folder*
create_in_closed_folder     boolean
                            default: `false`
        Creating a file when the cursor is on a closed folder will set the
        path to be inside the closed folder, otherwise the parent folder.

                                                     *nvim-tree.disable_netrw*
disable_netrw               boolean
                            default: `false`
        Completely disable netrw.
                                                     *nvim-tree.hijack_cursor*
hijack_cursor               boolean
                            default: `false`
        Keeps the cursor on the first letter of the filename when moving in
        the tree.
                                                      *nvim-tree.hijack_netrw*
hijack_netrw                boolean
                            default: `true`
        Hijack netrw windows (overridden if |nvim-tree.disable_netrw| is `true`).

                                *nvim-tree.hijack_unnamed_buffer_when_opening*
hijack_unnamed_buffer_when_opening
                            boolean
                            default: `false`
        Opens in place of the unnamed buffer if it's empty.

                                            *nvim-tree.ignore_buffer_on_setup*
ignore_buffer_on_setup      boolean
                            default: `false`
        Will ignore the buffer, when deciding to open the tree on setup.

                                                     *nvim-tree.open_on_setup*
open_on_setup               boolean
                            default: `false`
        Will automatically open the tree when running setup if startup buffer
        is a directory, is empty or is unnamed. nvim-tree window will be
        focused.
                                                *nvim-tree.ignore_ft_on_setup*
ignore_ft_on_setup          string[]
                            default: `{}`
        List of filetypes that will prevent |nvim-tree.open_on_setup| to open.
        You can use this option if you don't want the tree to open in some
        scenarios (eg using vim startify).
                                                *nvim-tree.open_on_setup_file*
open_on_setup_file          boolean
                            default: `false`
        Will automatically open the tree when running setup if startup buffer
        is a file.  File window will be focused.  File will be found if
        |nvim-tree.update_focused_file| is enabled.
                                                       *nvim-tree.open_on_tab*
open_on_tab                 boolean
                            default: `false`
        Opens the tree automatically when switching tabpage or opening a new
        tabpage if the tree was previously open.

                                          *nvim-tree.ignore_buf_on_tab_change*
ignore_buf_on_tab_change    string[]
                            default: `{}`
        List of filetypes or buffer names that will prevent
        |nvim-tree.open_on_tab| to open.
                                                           *nvim-tree.sort_by*
sort_by         `"name"` | `"case_sensitive"` | `"modification_time"` | `"extension"`
                            default: `"name"`
        Changes how files within the same directory are sorted.

                                                         *nvim-tree.root_dirs*
root_dirs                   string[]
                            default: `{}`
        Preferred root directories.
        Only relevant when |nvim-tree.update_root| is `true.`

                                               *nvim-tree.prefer_startup_root*
prefer_startup_root         boolean
                            default: `false`
        Prefer startup root directory when updating root directory of the tree.
        Only relevant when |nvim-tree.update_root| is `true`.

                                                *nvim-tree.sync_root_with_cwd*
sync_root_with_cwd          boolean
                            default: `false`
                            previous name: `update_cwd`
        Changes the tree root directory on |DirChanged| and refreshes the tree.

                                                *nvim-tree.reload_on_bufenter*
reload_on_bufenter          boolean
                            default: `false`
        Automatically reloads the tree on |BufEnter| nvim-tree.

                                                   *nvim-tree.respect_buf_cwd*
respect_buf_cwd             boolean
                            default: `false`
        Will change cwd of nvim-tree to that of new buffer's when opening
        nvim-tree.
                                                         *nvim-tree.on_attach*
on_attach                   function(bufnr)
                            default: `"disable"`
        Function ran when creating the nvim-tree buffer.  This can be used to
        attach keybindings to the tree buffer.  When `on_attach = "disabled"`,
        the older mapping strategy will be used, otherwise the new one will be
        used.
        DEPRECATED: If `nil`, the deprecated mapping strategy will be used!
>
            on_attach = function(bufnr)
                local inject_node = require("nvim-tree.utils").inject_node

                vim.keymap.set("n", "<leader>n", inject_node(function(node)
                    if node then
                        print(node.absolute_path)
                    end
                end), { buffer = bufnr, noremap = true })

                vim.bo[bufnr].path = "/tmp"
            end
<
                                                    *nvim-tree.remove_keymaps*
remove_keymaps              boolean | string[]
                            default: `false`
        Remove default key mappings.

        • `remove_keymaps = true`
                remove all default mappings;

        • `remove_keymaps = { "<C-o>", "<CR>", "o", "<Tab>" }`
                remove specified key mappings.
                                                              *nvim-tree.view*
view                        table
        Window / buffer setup.
                                                     *nvim-tree.adaptive_size*
        adaptive_size       boolean
                            default: `false`
                            parent table: `view`
                Resize the window on each draw based on the longest line.
                Only works when |nvim-tree.side| is `left` or `right`.

                                              *nvim-tree.centralize_selection*
        centralize_selection    boolean
                                default: `false`
                                parent table: `view`
                When entering nvim-tree, reposition the view so that the
                current node is initially centralized, see |zz|.

                                                        *nvim-tree.view.width*
        width               string | number | function
                            default: `30`
                            parent table: `view`
                Width of the window.  Can be a string with percentage of the
                editor width: `"9%"`, a number of columns or a function.

                                                       *nvim-tree.view.height*
        height              string | number | function
                            default: `30`
                            parent table: `view`
                Height of the window.  Can be a string with percentage of the
                editor height: `"9%"`, a number of rows or a function.

                                                  *nvim-tree.hide_root_folder*
        hide_root_folder    boolean
                            default: `false`
                Hide the path of the current working directory on top of the
                tree.
                                                              *nvim-tree.side*
        side                `"left"` | `"right"` | `"bottom"` | `"top"`
                            default: `"left"`
                            parent table: `view`
                On which side show the tree.
                WARNING: `"bottom"` / `"top"` options are not working correctly yet.

                                       *nvim-tree.preserve_window_proportions*
        preserve_window_proportions
                            boolean
                            default: `false`
                            parent table: `view`
                Preserves window proportions when opening a file.
                When `false`, the height and width of windows other than
                nvim-tree will be equalized.
                                                            *nvim-tree.number*
        number              boolean
                            default: `false`
                            parent table: `view`
                Print the line number in front of each line.

                                                    *nvim-tree.relativenumber*
        relativenumber      boolean
                            default: `false`
                            parent table: `view`
                Show the line number relative to the line with the cursor in
                front of each line.
                  If the option `view.number` (|nvim-tree.number|) is also
                `true`, the number on the cursor line will be the line number
                instead of `0`.
                                                        *nvim-tree.signcolumn*
        signcolumn          `"yes"` | `"auto"` | `"no"`
                            default: `"yes"`
                            parent table: `view`
                Show diagnostic sign column.

        ----------------------------------------------------------------------
        DEPRECATED                                    *nvim-tree.view.mappings*
        mappings            table
                            parent table: `view`
                Configuration options for |nvim-tree-mappings|.

                                              *nvim-tree.mappings.custom_only*
                custom_only     boolean
                                default: `false`
                                parent table: `view.mappings`
                        Will use only the provided user mappings and not the
                        default otherwise, extends the default mappings with
                        the provided user mappings.

                                                     *nvim-tree.mappings.list*
                list            table
                                default: see |nvim-tree-default-mappings|
                        A list of keymaps that will extend or override the
                        default keymaps.
        ----------------------------------------------------------------------

                                                        *nvim-tree.view.float*
        float               table
                            parent table: `view`
                Configuration options for floating window.

                                                      *nvim-tree.float.enable*
                enable              boolean
                                    default: `false`
                                    parent table: `view.float`
                        Display nvim-tree in float window (enforces
                        |nvim-tree.quit_on_open| if set).

                                             *nvim-tree.float.open_win_config*
                open_win_config     table
                                    default: |nvim-tree.float.open_win_config.defaults|
                                    parent table: `view.float`
                        Floating window config. See |nvim_open_win()| for more
                        details.

                                                          *nvim-tree.renderer*
renderer                    table
        UI rendering setup.

                                                      *nvim-tree.add_trailing*
        add_trailing            boolean
                                default: `false`
                                parent table: `renderer`
                Appends a trailing slash to folder names.

                                                       *nvim-tree.group_empty*
        group_empty             boolean
                                default: `false`
                                parent table: `renderer`
                Compact folders that only contain a single folder into one
                node in the file tree.

                                                         *nvim-tree.full_name*
        full_name               boolean
                                default: `false`
                                parent table: `renderer`
                Display node whose name length is wider than the width of
                nvim-tree window in floating window.

                                                     *nvim-tree.highlight_git*
        highlight_git           boolean
                                default: `false`
                                parent table: `renderer`
                Enable file highlight for git attributes using `NvimTreeGit*`
                highlight groups.  This can be used with or without the icons.

                                            *nvim-tree.highlight_opened_files*
        highlight_opened_files  `"none"` | `"icon"` | `"name"` | `"all"`
                                default: `"none"`
                                parent table: `renderer`
                Highlight icons and/or names for opened files.

                                              *nvim-tree.root_folder_modifier*
        root_folder_modifier    string
                                default: `":~"`
                                parent table: `renderer`
                In what format to show root folder. See |filename-modifiers| for
                available options.

                                                    *nvim-tree.indent_markers*
        indent_markers          table
                                parent table: `renderer`
                Configuration options for tree indent markers.

                                             *nvim-tree.indent_markers.enable*
                enable          boolean
                                default: `false`
                                parent table: `renderer.indent_markers`
                        Display indent markers when folders are open.

                                                     *nvim-tree.inline_arrows*
                inline_arrows   boolean
                                default: `true`
                                parent table: `renderer.indent_markers`
                        Display folder arrows in the same column as indent
                        marker when using |renderer.show-icon.folder_arrow|

                                              *nvim-tree.indent_markers.icons*
                icons           table
                                default:
                        `{ corner = "└", edge = "│",` `item = "│", none = " ", }`
                                parent table: `renderer.indent_markers`
                        Icons shown before the file/directory.

                                                             *nvim-tree.icons*
        icons                   table
                                parent table: `renderer`
                Configuration options for icons.

                                                     *nvim-tree.webdev_colors*
                webdev_colors       boolean
                                    default: `true`
                                    parent table: `renderer.icons`
                        Use the webdev icon colors, otherwise `NvimTreeFileIcon`.

                                                     *nvim-tree.git_placement*
                git_placement       `"after"` | `"before"` | `"signcolumn"`
                                    default: `"before"`
                                    parent table: `renderer.icons`
                        Where to render git icons.

                        •` "after"` | `"before"`
                                after/before filename (after the file/folders
                                icons);
                        • `"signcolumn"`
                                In signcolumn.  Requires
                                |nvim-tree.signcolumn| to be enabled.

                        Note: Diagnostic signs will take precedence over the
                        git signs.

                                                           *nvim-tree.padding*
                padding         string
                                default: `" "`
                                parent table: `renderer.icons`
                        Inserted between icon and filename.
                        WARNING: can break rendering if you set an empty string
                        depending on your font.

                                                     *nvim-tree.symlink_arrow*
                symlink_arrow       string
                                    default: `" ➛ "`
                                    parent table: `renderer.icons`
                        Used as a separator between symlinks' source and target.

                                                        *nvim-tree.show-icon*
                show            table
                                parent table: `renderer.icons`
                        Configuration options for showing icon types.

                                                    *nvim-tree.show-icon.file*
                        file            boolean
                                        default: `true`
                                        parent table: `renderer.icons.show`
                                Show an icon before the file name.
                                `nvim-web-devicons` will be used if available.

                                                  *nvim-tree.show-icon.folder*
                        folder          boolean
                                        default: `true`
                                        parent table: `renderer.icons.show`
                                Show an icon before the folder name.

                                            *nvim-tree.show-icon.folder_arrow*
                        folder_arrow    boolean
                                        default: `true`
                                        parent table: `renderer.icons.show`
                                Show a small arrow before the folder node.
                                Arrow will be a part of the node when using
                                |nvim-tree.indent_markers|.

                                                     *nvim-tree.show-icon.git*
                        git             boolean
                                        default: `true`
                                        parent table: `renderer.icons.show`
                                Show a git status icon, see *nvim-tree.git_placement*
                                Requires *nvim-tree.git.enable* to be `true`.

                                                     *nvim-tree.special_files*
        special_files           string[]
                                default:
                        `{ "Cargo.toml", "Makefile",` `"README.md", "readme.md" }`
                                parent table: `renderer`
                A list of filenames that gets highlighted with
                `NvimTreeSpecialFile` highlight group.

                                               *nvim-tree.symlink_destination*
        symlink_destination     boolean
                                default: `true`
                                parent table: `renderer`
                Whether to show the destination of the symlink.

                                                *nvim-tree.hijack_directories*
hijack_directories          table
                            previous name: `update_to_buf_dir`
        Hijacks new directory buffers when they are opened (`:e dir`).

                                         *nvim-tree.hijack_directories.enable*
        enable              boolean
                            default: `true`
                            parent table: `hijack_directories`
                Enable the feature.  Disable this option if you use vim-dirvish
                or dirbuf.nvim.  If |nvim-tree.hijack_netrw| and
                |nvim-tree.disable_netrw| are `false`, this feature will be
                disabled.

                                                         *nvim-tree.auto_open*
        auto_open           boolean
                            default: `true`
                            parent table: `hijack_directories`
                Opens the tree if the tree was previously closed.

                                               *nvim-tree.update_focused_file*
update_focused_file         table
        Update the focused file on |BufEnter|, un-collapses the folders
        recursively until it finds the file.

                                        *nvim-tree.update_focused_file.enable*
        enable              boolean
                            default: `false`
                            parent table: `update_focused_file`
                Enable this feature.

                                                       *nvim-tree.update_root*
        update_root         boolean
                            default: `false`
                            parent table: `update_focused_file`
                            previous name: `update_cwd`
                Update the root directory of the tree if the file is not under
                current root directory. It prefers vim's cwd and `root_dirs`.
                Otherwise it falls back to the folder containing the file.

                                   *nvim-tree.update_focused_file.ignore_list*
        ignore_list         string[]
                            default: `{}`
                            parent table: `update_focused_file`
                List of buffer names and filetypes that will not update the
                root dir of the tree if the file isn't found under the current
                root directory.
                  Only relevant when |nvim-tree.update_focused_file.enable| and
                |nvim-tree.update_root| are `true`.

                                                       *nvim-tree.system_open*
system_open                 table
        Configuration options for the system open command.

                                                   *nvim-tree.system_open.cmd*
        cmd                 string
                            default: `""`
                The command to run, leaving empty should work but useful if
                you want to override the default command with another one.

                                                  *nvim-tree.system_open.args*
        args                string[]
                            default: `{}`
                The command arguments as a list.

                                                       *nvim-tree.diagnostics*
diagnostics                 table
        Show LSP and COC diagnostics in the signcolumn

        enable              boolean
                            default: `false`
                            parent table: `diagnostic`

                                          *nvim-tree.diagnostics.show_on_dirs*
        show_on_dirs        boolean
                            default: `false`
                            parent table: `diagnostic`
                Show diagnostic icons on parent directories.

                                        *nvim-tree.diagnostics.debounce_delay*
        debounce_delay      number
                            default: `50` (ms)
                            parent table: `diagnostic`
                Idle milliseconds between diagnostic event and update.

                                                 *nvim-tree.diagnostics.icons*
        icons               table
                            default:
                        `{ hint = "", info = "", warning = "", error = "" }`
                            parent table: `diagnostic`
                Icons for diagnostic severity.

                NOTE: it will use the default diagnostic color groups to
                highlight the signs.  If you wish to customize, you can
                override these groups:
                    • `NvimTreeLspDiagnosticsError`
                    • `NvimTreeLspDiagnosticsWarning`
                    • `NvimTreeLspDiagnosticsInformation`
                    • `NvimTreeLspDiagnosticsHint`

                                                           *nvim-tree.filters*
filters                     table
        Filtering options.

                                                  *nvim-tree.filters.dotfiles*
        dotfiles            boolean
                            default: `false`
                            parent table: `filters`
                Do not show dotfiles: files starting with a `.`
                Toggle via the `toggle_dotfiles` action, default mapping `H`.

                                                    *nvim-tree.filters.custom*
        custom              string[]
                            default: `{}`
                            parent table: `filters`
                Custom list of vim regex for file/directory names that will
                not be shown.  Backslashes must be escaped e.g. `"^\\.git"`.
                See |string-match|.  Toggle via the `toggle_custom` action,
                default mapping `U`.

                                                   *nvim-tree.filters.exclude*
        exclude             string[]
                            default: `{}`
                            parent table: `filters`
                List of directories or files to exclude from filtering, i.e.
                always show them.  Overrides `git.ignore`, `filters.dotfiles`
                and `filters.custom`.

                                               *nvim-tree.filesystem_watchers*
filesystem_watchers         table

        Will use file system watcher (libuv fs_event) to watch the filesystem
        for changes.
          Using this will disable |BufEnter| / |BufWritePost| events in nvim-tree
        which were used to update the whole tree. With this feature, the tree
        will be updated only for the appropriate folder change, resulting in
        better performance.

        enable              boolean
                            default: `true`
                            parent table: `filesystem_watchers`

                            *nvim-tree.filesystem_watchers.debounce_delay*
        debounce_delay      number
                            default: `50` (ms)
                            parent table: `filesystem_watchers`
                Idle milliseconds between filesystem change and action.

                                                               *nvim-tree.git*
git                         table
        Git integration with icons and colors.

                                                        *nvim-tree.git.enable*
        enable              boolean
                            default: `true`
                            parent table: `git`

                                                    *nvim-tree.git.ignore*
        ignore              boolean
                            default: `true`
                            parent table: `git`
                Ignore files based on `.gitignore`.
                Toggle via the `toggle_git_ignored` action, default mapping `I`.

                                                  *nvim-tree.git.show_on_dirs*
        show_on_dirs        boolean
                            default: `true`
                            parent table: `git`
                Show status icons of children when directory itself has no
                status icon.
                                                       *nvim-tree.git.timeout*
        timeout             number
                            default: `400` (ms)
                            parent table: `git`
                Kills the git process after some time if it takes too long.

        You will still need to set |nvim-tree.show-icon.git| to `true` or
        |nvim-tree.highlight_git| to `true` to be able to see things in the
        tree. This will be changed in the future versions.

        The configurable timeout will kill the current process and so disable
        the git integration for the project that takes too long.  The git
        integration is blocking, so if your timeout is too long (like not in
        milliseconds but a few seconds), it will not render anything until the
        git process returned the data.

                                                           *nvim-tree.actions*
actions                     table
        Configuration for various actions.

                                              *nvim-tree.use_system_clipboard*
        use_system_clipboard    boolean
                                default: `true`
                                parent table: `actions`
                A boolean value that toggle the use of system clipboard when
                copy/paste function are invoked. When enabled, copied text
                will be stored in registers `+` (system), otherwise, it will
                be stored in `1` and `"`.

                                                        *nvim-tree.change_dir*
        change_dir              table
                                parent table: `actions`
                Neovim |current-directory| behaviour.

                                                 *nvim-tree.change_dir.enable*
                enable          boolean
                                default: `true`
                                parent table: `actions.change_dir`
                        Change the working directory when changing directories
                        in the tree.

                                                 *nvim-tree.change_dir.global*
                global          boolean
                                default: `false`
                                parent table: `actions.change_dir`
                        Use `:cd` instead of `:lcd` when changing directories.
                        WARNING: Consider that this might cause issues with
                        the |nvim-tree.sync_root_with_cwd| option.

                                                *nvim-tree.restrict_above_cwd*
                restrict_above_cwd      boolean
                                        default: `false`
                                        parent table: `actions.change_dir`
                        Restrict changing to a directory above the global
                        current working directory.

                                                        *nvim-tree.expand_all*
        expand_all          table
                            parent table: `actions`
                Configuration for expand_all behaviour.

                                              *nvim-tree.max_folder_discovery*
                max_folder_discovery    integer
                                        default: `300`
                                        parent table: `actions.expand_all`
                        Limit the number of folders being explored when
                        expanding every folders.  Avoids hanging neovim when
                        running this action on very large folders.

                                                *nvim-tree.expand_all.exclude*
                exclude         string[]
                                default: `{}`
                                parent table: `actions.expand_all`
                        A list of directories that should not be expanded
                        automatically.  E.g `{ ".git", "target", "build" }` etc.

                                                        *nvim-tree.file_popup*
        file_popup          table
                            parent table: `actions`
                Configuration for file_popup behaviour.

                                        *nvim-tree.file_popup.open_win_config*
                open_win_config     table
                                    default: |nvim-tree.file_popup.open_win_config.defaults|
                                    parent table: `actions.file_popup`
                        Floating window config for file_popup.
                        See |nvim_open_win| for more details.  You shouldn't
                        define `"width"` and `"height"` values here. They will be
                        overridden to fit the file_popup content.

                                                         *nvim-tree.open_file*
        open_file           table
                            parent table: `actions`
                Configuration options for opening a file from nvim-tree.

                                                      *nvim-tree.quit_on_open*
                quit_on_open        boolean
                                    default: `false`
                                    parent table: `actions.open_file`
                        Closes the explorer when opening a file.  It will also
                        disable preventing a buffer overriding the tree.

                                                     *nvim-tree.resize_window*
                resize_window       boolean
                                    default: `true`
                                    parent table: `actions.open_file`
                                    previous name: `view.auto_resize`
                        Resizes the tree when opening a file.

                                                     *nvim-tree.window_picker*
                window_picker       table
                                    parent table: `actions.open_file`
                        Window picker configuration.

                                              *nvim-tree.window_picker.enable*
                    enable      boolean
                                default: `true`
                                parent table: `actions.open_file.window_picker`

                            Enable the feature. If `false` - files will open
                            in window from which you last opened the tree.

                                           *nvim-tree.window_picker.chars*
                    chars       string
                                default: `"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"`
                                parent table: `actions.open_file.window_picker`

                            A string of chars used as identifiers by the
                            window picker.

                                         *nvim-tree.window_picker.exclude*
                    exclude     `{ buftype: string[], filetype: string[] }`
                                default: |nvim-tree.window_picker.exclude.defaults|
                                parent table: `actions.open_file.window_picker`

                            Table of buffer option names mapped to a list of
                            option values that indicates to the picker that
                            the buffer's window should not be selectable.

                                                       *nvim-tree.remove_file*
        remove_file         table
                            parent table: `actions`
                                                      *nvim-tree.close_window*
                close_window        boolean
                                    default: `true`
                                    parent table: `actions.remove_file`
                        Close any window displaying a file when removing the
                        file from the tree.

                                                             *nvim-tree.trash*
trash                       table
        Configuration options for trashing.

                                                         *nvim-tree.trash.cmd*
        cmd                 string
                            default: `"gio trash"`
                            parent table: `trash`
                The command used to trash items (must be installed on your
                system).  The default is shipped with glib2 which is a common
                linux package.

                                             *nvim-tree.trash.require_confirm*
        require_confirm     boolean
                            default: `true`
                            parent table: `trash`
                Show a prompt before trashing takes place.

                                                       *nvim-tree.live_filter*
live_filter                 table
        Configurations for the live_filtering feature.
        The live filter allows you to filter the tree nodes dynamically, based
        on regex matching (see |vim.regex|).
        This feature is bound to the `f` key by default.
        The filter can be cleared with the `F` key by default.

                                                *nvim-tree.live_filter.prefix*
        prefix              string
                            default: `"[FILTER]: "`
                            parent table: `live_filter`
                Prefix of the filter displayed in the buffer.

                                               *nvim-tree.always_show_folders*
        always_show_folders     boolean
                                default: `true`
                                parent table: `live_filter`
                Whether to filter folders or not.

                                                               *nvim-tree.log*
log                         table
        Configuration for diagnostic logging.

                                                        *nvim-tree.log.enable*
        enable              boolean
                            default: `false`
                            parent table: `log`
                Enable logging to a file `$XDG_CACHE_HOME/nvim/nvim-tree.log`

                                                      *nvim-tree.log.truncate*
        truncate            boolean
                            default: `false`
                            parent table: `log`
                Remove existing log file at startup.

                                                         *nvim-tree.log.types*
        types               table
                            parent table: `log`
                Specify which information to log.

                                                           *nvim-tree.log.all*
                all                 boolean
                                    default: `false`
                                    parent table: `log.types`
                        Everything.

                                                        *nvim-tree.log.config*
                config              boolean
                                    default: `false`
                                    parent table: `log.types`
                        Options and mappings, at startup.

                                                    *nvim-tree.log.copy_paste*
                copy_paste          boolean
                                    default: `false`
                                    parent table: `log.types`
                        File copy and paste actions.

                                                           *nvim-tree.log.dev*
                dev                 boolean
                                    default: `false`
                                    parent table: `log.types`
                        Used for local development only. Not useful for users.

                                                   *nvim-tree.log.diagnostics*
                diagnostics         boolean
                                    default: `false`
                                    parent table: `log.types`
                        LSP and COC processing, verbose.

                                                           *nvim-tree.log.git*
                git                 boolean
                                    default: `false`
                                    parent table: `log.types`
                        Git processing, verbose.

                                                       *nvim-tree.log.profile*
                profile             boolean
                                    default: `false`
                                    parent table: `log.types`
                        Timing of some operations.

                                                       *nvim-tree.log.watcher*
                watcher             boolean
                                    default: `false`
                                    parent table: `log.types`
                        |nvim-tree.filesystem_watchers| processing, verbose.

==============================================================================
 4.1 VINEGAR STYLE                                         *nvim-tree.vinegar*

Nvim-tree can behave like vinegar. To allow this, you will need to configure
it in a specific way:

  - Use  >
        require("nvim-tree").open_replacing_current_buffer()
<   instead of the default open command.
    You can easily implement a toggle using this too:
>
        local function toggle_replace()
          local view = require"nvim-tree.view"
          if view.is_visible() then
            view.close()
          else
            require"nvim-tree".open_replacing_current_buffer()
          end
        end
<
  - Use the `edit_in_place` action to edit files. It's bound to `<C-e>` by
    default, vinegar uses `<CR>`. You can override this with:
>
        require"nvim-tree".setup {
          view = {
            mappings = {
              list = {
                { key = "<CR>", action = "edit_in_place" }
              }
            }
          }
        }
<
Going up a dir is bound to `-` by default in nvim-tree which is identical to
vinegar, no change is needed here.

You'll also need to set |nvim-tree.hijack_netrw| to `true` during setup.
A good functionality to enable is |nvim-tree.hijack_directories|.

==============================================================================
 5. API                                                         *nvim-tree-api*

Nvim-tree's public API can be used to access features.
>
    local nt_api = require("nvim-tree.api")

    nt_api.tree.toggle()
<
This module exposes stable functionalities, it is advised to use this in order
to avoid breaking configurations due to internal breaking changes.

The api is separated in multiple modules, which can be accessed with
`require("nvim-tree.api").moduleName.functionality`.

Functions that needs a tree node parameter are exposed with an abstraction
that injects the node from the cursor position in the tree when calling
the function. It will use the node you pass as an argument in priority if it
exists.

• api.tree:                                             *nvim-tree.api.tree*
    • open `(path?: string)`
    • close
    • toggle `(find_file?: bool, no_focus?: bool, path?: string)`
    • focus
    • reload
    • change_root `(path: string)`
    • change_root_to_node
    • change_root_to_parent
    • get_node_under_cursor
    • find_file `(filename: string)`
    • search_node
    • collapse_all `(keep_buffers?: bool)`
    • expand_all
    • toggle_gitignore_filter
    • toggle_custom_filter
    • toggle_hidden_filter
    • toggle_help

• api.fs:                                               *nvim-tree.api.fs*
    • create
    • remove
    • trash
    • rename
    • rename_sub
    • cut
    • paste
    • print_clipboard
    • copy.node
    • copy.absolute_path
    • copy.filename
    • copy.relative_path

• api.node:                                             *nvim-tree.api.node*
    • open.edit
    • open.replace_tree_buffer
    • open.no_window_picker
    • open.vertical
    • open.horizontal
    • open.tab
    • open.preview
    • show_info_popup
    • run.cmd
    • run.system
    • navigate.sibling.next
    • navigate.sibling.prev
    • navigate.sibling.first
    • navigate.sibling.last
    • navigate.parent
    • navigate.parent_close
    • navigate.git.next
    • navigate.git.prev
    • navigate.diagnostics.next
    • navigate.diagnostics.prev

• api.git:                                              *nvim-tree.api.git*
    • reload

• api.events:                                           *nvim-tree.api.events*
    • subscribe `(eventType: Event, callback: function(...args))`
    • Event (enum type, please see |nvim-tree.events_kind|)

• api.live_filter:                                      *nvim-tree.api.live_filter*
    • start
    • clear

• api.marks:                                            *nvim-tree.api.marks*
    • get
    • list
    • toggle
    • bulk.move
    • navigate.next
    • navigate.prev
    • navigate.select

==============================================================================
 6. MAPPINGS                                              *nvim-tree-mappings*

Setting your own mapping in the configuration will soon be deprecated, see
|nvim-tree.on_attach| for experimental replacement.

The `list` option in `view.mappings.list` is a table of

• `key`         can be either a string or a table of string (lhs);

• `action`      is the name of the action, set to `""` to remove default action;

• `action_cb`   is the function that will be called, it receives the node as
              a parameter. Optional for default actions;

• `mode`        is normal by default.
>
    local tree_cb = require'nvim-tree.config'.nvim_tree_callback

    local function print_node_path(node) {
      print(node.absolute_path)
    }

    local list = {
      { key = {"<CR>", "o" }, action = "edit", mode = "n"},
      { key = "p", action = "print_path", action_cb = print_node_path },
      { key = "s", cb = tree_cb("vsplit") }, -- tree_cb and the cb property are deprecated
      { key = "<2-RightMouse>", action = "" }, -- will remove default cd action
    }
<
DEFAULT MAPPINGS                                     *nvim-tree-default-mappings*

<CR>    edit                Open a file or folder; root will cd to the above
                            directory.
o
<2-LeftMouse>
<C-e>
        edit_in_place       Edit the file in place, effectively replacing the
                            tree explorer.

O       edit_no_picker      same as (edit) with no window picker.
<C-]>   cd                  Cd in the directory under the cursor.

<2-RightMouse>
<C-v>   vsplit              Open the file in a vertical split
<C-x>   split               Open the file in a horizontal split
<C-t>   tabnew              Open the file in a new tab

<       prev_sibling        Navigate to the previous sibling of current
                            file/directory

>       next_sibling        Navigate to the next sibling of current
                            file/directory

P       parent_node         Move cursor to the parent directory.
<BS>    close_node          Close current opened directory or parent.

<Tab>   preview             Open the file as a preview (keeps the cursor in
                            the tree).

K       first_sibling       Navigate to the first sibling of current
                            file/directory.

J       last_sibling        Navigate to the last sibling of current
                            file/directory.

I       toggle_git_ignored  Toggle visibility of files/folders hidden via
                            |git.ignore| option.

H       toggle_dotfiles     Toggle visibility of dotfiles via
                            |filters.dotfiles| option.

U       toggle_custom       Toggle visibility of files/folders hidden via
                            |filters.custom| option.

R       refresh             Refresh the tree.

a       create              Add a file; leaving a trailing `/` will add
                            a directory.

d       remove              Delete a file (will prompt for confirmation).
D       trash               Trash a file via |trash| option.
r       rename              Rename a file.
<C-r>   full_rename         Rename a file and omit the filename on input.
x       cut                 Add/remove file/directory to cut clipboard.
c       copy                Add/remove file/directory to copy clipboard.

p       paste               Paste from clipboard; cut clipboard has precedence
                            Over copy; will prompt for confirmation.

y       copy_name           Copy name to system clipboard.
Y       copy_path           Copy relative path to system clipboard.
gy      copy_absolute_path  Copy absolute path to system clipboard.
[e      prev_diag_item      Go to next diagnostic item.
[c      prev_git_item       Go to next git item.
]e      next_diag_item      Go to prev diagnostic item.
]c      next_git_item       Go to prev git item.

-       dir_up              Navigate up to the parent directory of the current
                            file/directory.

s       system_open         Open a file with default system application or
                            a folder with default file manager, using
                            |system_open| option.

f       live_filter         Live filter nodes dynamically based on regex
                            matching.

F       clear_live_filter   Clear live filter.
q       close               Close tree window.
W       collapse_all        Collapse the whole tree.

E       expand_all          Expand the whole tree, stopping after expanding
                            |actions.expand_all.max_folder_discovery| folders;
                            this might hang neovim for a while if running on
                            a big folder.

S       search_node         Prompt the user to enter a path and then expands
                            the tree to match the path.

.       run_file_command    Enter vim command mode with the file the cursor is on.

<C-k>   toggle_file_info    Toggle a popup with file infos about the file
                            under the cursor.

g?      toggle_help         Toggle help.
m       toggle_mark         Toggle node in bookmarks.
bmv     bulk_move           Move all bookmarked nodes into specified location.

>
  view.mappings.list = { -- BEGIN_DEFAULT_MAPPINGS
    { key = { "<CR>", "o", "<2-LeftMouse>" }, action = "edit" },
    { key = "<C-e>", action = "edit_in_place" },
    { key = "O",     action = "edit_no_picker" },
    { key = { "<C-]>", "<2-RightMouse>" }, action = "cd" },
    { key = "<C-v>", action = "vsplit" },
    { key = "<C-x>", action = "split" },
    { key = "<C-t>", action = "tabnew" },
    { key = "<",     action = "prev_sibling" },
    { key = ">",     action = "next_sibling" },
    { key = "P",     action = "parent_node" },
    { key = "<BS>",  action = "close_node" },
    { key = "<Tab>", action = "preview" },
    { key = "K",     action = "first_sibling" },
    { key = "J",     action = "last_sibling" },
    { key = "I",     action = "toggle_git_ignored" },
    { key = "H",     action = "toggle_dotfiles" },
    { key = "U",     action = "toggle_custom" },
    { key = "R",     action = "refresh" },
    { key = "a",     action = "create" },
    { key = "d",     action = "remove" },
    { key = "D",     action = "trash" },
    { key = "r",     action = "rename" },
    { key = "<C-r>", action = "full_rename" },
    { key = "x",     action = "cut" },
    { key = "c",     action = "copy" },
    { key = "p",     action = "paste" },
    { key = "y",     action = "copy_name" },
    { key = "Y",     action = "copy_path" },
    { key = "gy",    action = "copy_absolute_path" },
    { key = "[e",    action = "prev_diag_item" },
    { key = "[c",    action = "prev_git_item" },
    { key = "]e",    action = "next_diag_item" },
    { key = "]c",    action = "next_git_item" },
    { key = "-",     action = "dir_up" },
    { key = "s",     action = "system_open" },
    { key = "f",     action = "live_filter" },
    { key = "F",     action = "clear_live_filter" },
    { key = "q",     action = "close" },
    { key = "W",     action = "collapse_all" },
    { key = "E",     action = "expand_all" },
    { key = "S",     action = "search_node" },
    { key = ".",     action = "run_file_command" },
    { key = "<C-k>", action = "toggle_file_info" },
    { key = "g?",    action = "toggle_help" },
    { key = "m",     action = "toggle_mark" },
    { key = "bmv",   action = "bulk_move" },
  } -- END_DEFAULT_MAPPINGS
<

==============================================================================
 7. HIGHLIGHT GROUPS                                     *nvim-tree-highlight*

All the following highlight groups can be configured by hand. Aside from
`NvimTreeWindowPicker`, it is not advised to colorize the background of these
groups.

Example (in your `init.vim`):
>
    highlight NvimTreeSymlink guifg=blue gui=bold,underline
<
You should have 'termguicolors' enabled, otherwise, colors will not be applied.

Default linked group follows name~

• NvimTreeSymlink
• NvimTreeFolderName        (Directory)
• NvimTreeRootFolder
• NvimTreeFolderIcon
• NvimTreeFileIcon
• NvimTreeEmptyFolderName   (Directory)
• NvimTreeOpenedFolderName  (Directory)
• NvimTreeExecFile
• NvimTreeOpenedFile
• NvimTreeSpecialFile
• NvimTreeImageFile
• NvimTreeIndentMarker

• NvimTreeLspDiagnosticsError       (DiagnosticError)
• NvimTreeLspDiagnosticsWarning     (DiagnosticWarn)
• NvimTreeLspDiagnosticsInformation (DiagnosticInfo)
• NvimTreeLspDiagnosticsHint        (DiagnosticHint)

• NvimTreeGitDirty
• NvimTreeGitStaged
• NvimTreeGitMerge
• NvimTreeGitRenamed
• NvimTreeGitNew
• NvimTreeGitDeleted
• NvimTreeGitIgnored        (Comment)

• NvimTreeWindowPicker

Links to normal bindings to style the tree itself~

• NvimTreeNormal
• NvimTreeEndOfBuffer       (NonText)
• NvimTreeCursorLine        (CursorLine)
• NvimTreeVertSplit         (VertSplit)   DEPRECATED: use NvimTreeWinSeparator
• NvimTreeWinSeparator      (VertSplit)
• NvimTreeCursorColumn      (CursorColumn)

Links for file highlight with git properties, linked to their Git equivalent~

• NvimTreeFileDirty         (NvimTreeGitDirty)
• NvimTreeFileStaged        (NvimTreeGitStaged)
• NvimTreeFileMerge         (NvimTreeGitMerge)
• NvimTreeFileRenamed       (NvimTreeGitRenamed)
• NvimTreeFileNew           (NvimTreeGitNew)
• NvimTreeFileDeleted       (NvimTreeGitDeleted)
• NvimTreeFileIgnored       (NvimTreeGitIgnored)

Highlight groups for the live filter feature~

• NvimTreeLiveFilterPrefix
• NvimTreeLiveFilterValue

Color of the bookmark icon~

• NvimTreeBookmark


==============================================================================
 8. EVENTS                                                  *nvim-tree-events*

Nvim-tree will dispatch events whenever an action is made. These events can be
subscribed to through handler functions. This allows for even further
customization of nvim-tree.

A handler for an event is just a function which receives one argument, the
payload of the event. The payload is different for each event type.

Handlers are registered by calling the `events.subscribe` function available
from the `require("nvim-tree.api")` module.

For example, registering a handler for when a node is renamed is done like
this:
>
  local api = require('nvim-tree.api')

  api.events.subscribe(Event.NodeRenamed, function(data)
      print(string.format(
          'Node renamed from %d to %d'), date.old_name, date.new_name)
  end)
<
                                                       *nvim-tree.events_kind*
You can access the event enum with:
>
    local Event = require('nvim-tree.api').events.Event
<
Here is the list of available variant of this enum:

Event.Ready             When NvimTree has been initialized.
                        Handler takes no parameter.

Event.TreeOpen          Handler takes no parameter.

Event.TreeClose         Handler takes no parameter.

Event.Resize            When NvimTree is resized.
                        handler parameters: ~
                            {size}          number
                                    Size of the view in columns.

Event.NodeRenamed       A node can either be a file or a directory.
                        handler parameters: ~
                            {old_name}      string
                                    Absolute path to the old node location.

                            {new_name}      string
                                    Absolute path to the new node location.

Event.FileCreated
                        handler parameters: ~
                            {fname}         string
                                    Absolute path to the created file

Event.FileRemoved
                        handler parameters: ~
                            {fname}         string
                                    Absolute path to the removed file.

Event.FolderCreated
                        handler parameters: ~
                            {folder_name}   string
                                    Absolute path to the created folder.

Event.FolderRemoved
                        handler parameters: ~
                            {folder_name}       string
                                    Absolute path to the removed folder.

==============================================================================
 9. BOOKMARKS                                      *nvim-tree-bookmarks*

You can toggle marks on files/folders with
`require("nvim-tree.api").marks.toggle(node)` which is bound to `m` by
default.

To get the list of marked paths, you can call
`require("nvim-tree.api").marks.list()`. This will return `{node}`.

*nvim-tree.bookmarks.navigation*

Navigation for marks is not bound by default in nvim-tree because we don't
want to focus the tree view each time we wish to switch to another mark.

This requires binding bookmark navigation yourself.
>
 vim.keymap.set("n", "<leader>mn", require("nvim-tree.api").marks.navigate.next)
 vim.keymap.set("n", "<leader>mp", require("nvim-tree.api").marks.navigate.prev)
 vim.keymap.set("n", "<leader>ms", require("nvim-tree.api").marks.navigate.select)
<
------------------------------------------------------------------------------
 vim:ft=help:et:tw=78:ts=4:sw=4:norl:
